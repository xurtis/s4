# Built-in s4 configuration

# Configuration flags
# ===================
#
# Flags are used to configure s4 and to define dependencies between configurations.
#
# - name: All flags must have a name that is 'kebab-case'. This will be used on the command line to
#   enable (with the '--' prefix), disable (with the '--no-' prefix), and set (with the '--set-'
#   prefix) the value for a given build configuration.
# - description: All flags must have a human-readable description.
# - variable: If this is provided, the CMake variable with this name will be set to the configured
#   value.
#
# Flag requirements
# -----------------
#
# Each flag can have multiple requirements sections. Only one section is required to be satisfied
# for the flag to be enabled. A requirements section is satisfied if all flags listed have been
# configured with the given value or one of the values in a given list of valus.

# Flags set by via command line arguments

[flag.release]
description = "Disable debug kernel and project configuration; optimised build"
variable = "RELEASE"

[flag.simulation]
description = "Build for QEMU and generate simulation script"
variable = "SIMLULATION"

	[[flag.simulation.requires]]
	can-simulate = true

[flag.smp]
description = "Configure kernel to use multiple cores"
variable = "SMP"

[flag.mcs]
description = "Configure kernel to use MCS scheduler"
variable = "MCS"

	[[flag.mcs.requires]]
	can-mcs = true

[flag.arm-hyp]
description = "Configure ARM platform to enable hypervisor"
variable = "ARM_HYP"

	[[flag.arm-hyp.requires]]
	has-hypervisor = true
	architecture = "arm"

[flag.verification]
name = "verification"
description = "Configure only verification-compatible features"
variable = "VERIFICATION"

[flag.bamboo]
name = "bamboo"
description = "Configure test output to be compliant with bamboo"
variable = "BAMBOO"

[flag.domains]
description = "Enable multiple kernel scheduling domains"
variable = "DOMAINS"

[flag.fastpath]
name = "fastpath"
description = "Enable the kernel IPC fastpath"
variable = "FASTPATH"

# Flags set to indicate platform

[flag.platform]
# This flag is automatically set by setting the platform
description = "Set the platform used when building (recognised by cmake-tool)"
variable = "PLATFORM"

[flag.kernel-platform]
# This flag is automatically set by setting the platform
description = "The platform string recognised by seL4"
variable = "KernelPlatform"

[flag.architecture]
# This flag is automatically derived from the sel4-architecture
description = "Platform architecture (arm, riscv, X86)"

[flag.sel4-architecture]
# This flag is set based on the architecture configured at command line
description = "Platform sel4 architecture (aarch32, aarch64, riscv32, riscv64, ia32, x86_64)"
variable = "KernelSel4Arch"

# Flags set by seL4 named architectures

[flag.cross-compiler-prefix]
# This flag is set based on the platform architecture
description = "Prefix added to binutils and compiler binaries"
variable = "CROSS_COMPILER_PREFIX"

[flag.riscv32]
# This flag is set based on the platform architecture
description = "Build kernel for riscv32"
variable = "RISCV32"

[flag.riscv64]
# This flag is set based on the platform architecture
description = "Build kernel for riscv64"
variable = "RISCV64"

[flag.aarch32]
# This flag is set based on the platform architecture
description = "Build kernel for aarch32"
variable = "AARCH32"

[flag.aarch64]
# This flag is set based on the platform architecture
description = "Build kernel for aarch64"
variable = "AARCH64"

# Flags set by platforms to indicate features

[flag.can-mcs]
description = "Platform supports MCS"

[flag.has-hypervisor]
description = "Platform supports virtualisation"

[flag.can-simulate]
description = "Platform supports simulation"

# Flag set by platform variations

[flag.arm-platform]
description = "Specific variation of ARM platform to build"
variable = "KernelARMPlatform"

[flag.arm-cpu]
description = "Specific CPU emulated by QEMU"
variable = "ARM_CPU"

[flag.x86-micro-arch]
description = "Specific micro-architecture to build for x86"
variable = "KernelX86MicroArch"

# Platforms
# =========
#
# Platforms describe a hardware platform that can be targeted and the features available for that
# platform.
#
# - name: The name recognised by the CMake build system to configure a particular platform
# - architectures: The seL4 named architectures supported on the given platform
# - flag settings: Values to set for flags when the platform is configured
#
# Platform variations
# -------------------
#
# A platform variation is a more specific platform that has more features than its base platform.
#
# - name: A named identifier for the variation
# - flag settings: Values to set for flags when the platform is configured (overrides base
#   platform)

[platform.allwinnerA20]
architectures = [ "aarch32" ]

[platform.am335x]
architectures = [ "aarch32" ]
can-mcs = true

	[platform.am335x.variation.am335x-boneblack]
	arm-platform = "am335x-boneblack"

	[platform.am335x.variation.am335x-boneblue]
	arm-platform = "am335x-boneblue"

[platform.apq8064]
architectures = [ "aarch32" ]

[platform.ariane]
architectures = [ "riscv32", "riscv64" ]
can-mcs = true

[platform.bcm2837]
architectures = [ "aarch32", "aarch64" ]
can-simulate = true
has-hypervisor = true
can-mcs = true

	[platform.bcm2837.variation.rpi3]
	arm-platform = "rpi3"

[platform.exynos4]
architectures = [ "aarch32" ]
can-mcs = true

[platform.exynos5]
name = "exynos5"
architectures = [ "aarch32" ]
has-hypervisor = true
can-mcs = true

	[platform.exynos5.variation.exynos5250]
	arm-platform = "exynos5250"

	[platform.exynos5.variation.exynos5410]
	arm-platform = "exynos5410"

	[platform.exynos5.variation.exynos5422]
	arm-platform = "exynos5250"

[platform.fvp]
architectures = [ "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.hifive]
architectures = [ "riscv64" ]
can-mcs = true

[platform.hikey]
architectures = [ "aarch32", "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.imx31]
architectures = [ "aarch32" ]
can-simulate = true
can-mcs = true

[platform.imx6]
architectures = [ "aarch32" ]
can-simulate = true
can-mcs = true

	[platform.imx6.variation.sabre]
	arm-platform = "sabre"

	[platform.imx6.variation.wandq]
	arm-platform = "wandq"

[platform.imx7]
architectures = [ "aarch32" ]
can-simulate = true
can-mcs = true

[platform.imx8mm-evk]
architectures = [ "aarch32", "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.imx8mq-evk]
architectures = [ "aarch32", "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.odroidc2]
architectures = [ "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.omap3]
architectures = [ "aarch32" ]
can-mcs = true

[platform.pc99]
name = "pc99"
architectures = [ "ia32", "x86_64" ]
x86-micro-arch = "generic"
can-simulate = true
has-hypervisor = true
can-mcs = true

	[platform.pc99.variation.nehalem]
	x86-micro-arch = "nehalem"

	[platform.pc99.variation.westmere]
	x86-micro-arch = "westmere"

	[platform.pc99.variation.sandybridge]
	x86-micro-arch = "sandy"

	[platform.pc99.variation.ivybridge]
	x86-micro-arch = "ivy"

	[platform.pc99.variation.haswell]
	x86-micro-arch = "haswell"

	[platform.pc99.variation.broadwell]
	x86-micro-arch = "broadwell"

	[platform.pc99.variation.skylake]
	x86-micro-arch = "skylake"

[platform.qemu-cortex-a15]
architectures = [ "aarch32" ]
can-simulate = true
has-hypervisor = true
can-mcs = true
arm-cpu = "cortex-a15"
platform = "qemu-arm-virt"

[platform.qemu-cortex-a53]
architectures = [ "aarch64" ]
can-simulate = true
has-hypervisor = true
can-mcs = true
arm-cpu = "cortex-a53"
platform = "qemu-arm-virt"

[platform.qemu-cortex-a57]
architectures = [ "aarch64" ]
can-simulate = true
has-hypervisor = true
can-mcs = true
arm-cpu = "cortex-a57"
platform = "qemu-arm-virt"

[platform.rocketchip]
architectures = [ "riscv32", "riscv64" ]
can-mcs = true

[platform.rockpro64]
architectures = [ "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.spike]
architectures = [ "riscv32", "riscv64" ]
can-simulate = true
can-mcs = true

[platform.tk1]
architectures = [ "aarch32" ]
has-hypervisor = true
can-mcs = true

[platform.tx2]
architectures = [ "aarch64" ]
has-hypervisor = true
can-mcs = true

[platform.zynq7000]
architectures = [ "aarch32" ]
can-simulate = true
can-mcs = true

[platform.zynqmp]
architectures = [ "aarch32", "aarch64" ]
has-hypervisor = true

# Architecture flags
# ==================

[architecture.riscv64]
cross_compiler_prefix = "riscv64-unknown-linux-gnu-"
riscv64 = true
architecture = "riscv"
sel4-architecture = "riscv64"

[architecture.riscv32]
cross_compiler_prefix = "riscv64-unknown-linux-gnu-"
riscv32 = true
architecture = "riscv"
sel4-architecture = "riscv32"

[architecture.aarch32]
cross_compiler_prefix = "arm-linux-gnueabi-"
aarch32 = true
architecture = "arm"
sel4-architecture = "aarch32"

[architecture.aarch64]
cross_compiler_prefix = "aarch64-linux-gnu-"
aarch64 = true
architecture = "arm"
sel4-architecture = "aarch64"

[architecture.x86_64]
architecture = "X86"
sel4-architecture = "x86_64"

[architecture.ia32]
architecture = "X86"
sel4-architecture = "ia32"

# Projects
# ========
#
# Each project identifies a project directory that can be initialised with repo.
#
# - name: Each project is identified by a name
# - repository: The name of the manifest repository in the form of <owner/org>/<repo> without a
#   .git suffix
# - source-directory: The project source directory relative to the root of the checkout repo
# - command-line: A list of flags to make available at the command line
# - flags: A project can also set flags that will be overridden by the platform.

[project.sel4test]
repository = "seL4/sel4test-manifest"
source-directory = "projects/sel4test"
command-line = [
	"simulation",
	"release",
	"verification",
	"bamboo",
	"domains",
	"smp",
	"mcs",
	"fastpath",
	"arm-hyp",
]
